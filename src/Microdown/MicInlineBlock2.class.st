"
I am an inline block generated by inline splitter, to parse inline text.

I am characterized by:
- start & end: locations of my opener & closer delimiters in initial string
- substring: concerned text (without delimiters so)
- kind: my type, symbol which must be the same than my relative delimiter type (#basic for normal text)
- children: array in case of nested inline blocks


"
Class {
	#name : #MicInlineBlock2,
	#superclass : #Object,
	#instVars : [
		'start',
		'end',
		'kind',
		'children',
		'string'
	],
	#category : #'Microdown-Model'
}

{ #category : #'instance creation' }
MicInlineBlock2 class >> from: aStartInteger to: anEndInteger withKind: aKind withString: aString withChildren: aChildren [
	^ self new 
			start: aStartInteger; 
			end: anEndInteger; 
			kind: aKind; 
			string: aString; 
			children: aChildren; 
			yourself
	
]

{ #category : #obsolete }
MicInlineBlock2 class >> from: aStartInteger to: anEndInteger withKind: aKind withSubstring: aString withChildren: aChildren [
	^ self new start: aStartInteger; end: anEndInteger; kind: aKind; substring: aString; children: aChildren; cleanSubstring; yourself.	
]

{ #category : #accessing }
MicInlineBlock2 >> children [
	^ children
]

{ #category : #accessing }
MicInlineBlock2 >> children: anArray [
	children := anArray
]

{ #category : #printing }
MicInlineBlock2 >> childrenPrintOn [
	self flag: #fixme. "why that?"
	^ (children asString allButFirst: 9) allButLast
]

{ #category : #operations }
MicInlineBlock2 >> cleanSubstring [
	self isOnlyChild ifTrue: [ 
		self substring: ( String streamContents: [:s | 
			(substring splitOn: self escapeCharacter)
				doWithIndex: [:each :i | 
					(each isEmpty and: i>1) ifTrue: [ s << self escapeCharacter ] ifFalse: [ s << each ] ] ] ) ]
]

{ #category : #accessing }
MicInlineBlock2 >> end [
	^ end
]

{ #category : #accessing }
MicInlineBlock2 >> end: anInteger [
	end := anInteger
]

{ #category : #operations }
MicInlineBlock2 >> escapeCharacter [
	^ MicEscapeDelimiter markup
]

{ #category : #testing }
MicInlineBlock2 >> isOnlyChild [
	^ children isEmpty
]

{ #category : #accessing }
MicInlineBlock2 >> kind [
	^ kind
]

{ #category : #accessing }
MicInlineBlock2 >> kind: aKind [
	kind := aKind
]

{ #category : #accessing }
MicInlineBlock2 >> literal [
	^ string copyFrom: start to: end. 
]

{ #category : #printing }
MicInlineBlock2 >> printOn: aStream [
	(self kind == #basic) 
		ifTrue: [ aStream nextPutAll: self string ] 
		ifFalse: [ 
			| contents |
			contents := children 
				ifEmpty: [ self string ] 
				ifNotEmpty: [ self childrenPrintOn ].
			aStream nextPut: $[;
				nextPutAll: contents;
				nextPut: $];
				nextPut: $(;
				nextPutAll: self kind;
				nextPut: $) 
		]
			
]

{ #category : #accessing }
MicInlineBlock2 >> start [ 	
	^ start
]

{ #category : #accessing }
MicInlineBlock2 >> start: anInteger [
	start := anInteger 
]

{ #category : #accessing }
MicInlineBlock2 >> string [
	^ string
]

{ #category : #accessing }
MicInlineBlock2 >> string: aSubString [
	string := aSubString
]

{ #category : #obsolete }
MicInlineBlock2 >> substring [
	^ string
]

{ #category : #obsolete }
MicInlineBlock2 >> substring: aSubString [
	string := aSubString
]
